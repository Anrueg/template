{%- from 'macros.jinja' import eslint_extensions -%}

$schema: "https://moonrepo.dev/schemas/project.json"

id: wizard
type: scaffolding
language: typescript
project:
  name: "Wizard"
  description: "Code generation templates"

fileGroups:
  eslint:
    - "**/*.{{ eslint_extensions() }}"
    - "/*.{{ eslint_extensions() }}"
    # Angular config files, outside angular package, like: /angular/tsconfig.base.json
    - "/angular/*.{{ eslint_extensions() }}"
    - "/.moon/**/*.{{ eslint_extensions() }}"
    - "!/.moon/cache/**/*"
    - "!*/templates/**/*"


{% macro generator_task(name, tpl, note, post = None) -%}
  "{{ name }}.gen":
    command: moon generate {{ tpl }}
    toolchain: system
    options:
      runFromWorkspaceRoot: true
      interactive: true
      cache: false
      internal: true

  {% if post -%}
  "{{ name }}.post"
    command: >-
      {{ post }}
    toolchain: system
    options:
      runFromWorkspaceRoot: true
      interactive: true
      cache: false
      internal: true
  {%- endif %}

  "{{ name }}":
    description: "{{ note }}"
    command: moon run wizard:sync
    toolchain: system
    deps: ["{{ name }}.gen"{% if post %}, "{{ name }}.post"{% endif %}]
    options:
      runDepsInParallel: false
      runFromWorkspaceRoot: true
      interactive: true
      cache: false
{%- endmacro %}

tasks:
  {% if frontend == 'angular' -%}
  sync.angular.do:
    description: Sync angular configs from project & moon configs
    command: {{ frontend_toolchain }} wizard/angular/scripts/sync-configs.ts
    inputs:
      - /angular/*/ng-config.json
      - /angular/*/moon.yml
      - /angular/*/.storybook/**/*
      - /wizard/angular/scripts/sync-configs.ts
      - /wizard/moon.yml
      - "@group(moon-utils)"
    options:
      runFromWorkspaceRoot: true
      mutex: wizard-sync-angular
      internal: true
      cache: false

  sync.angular:
    command: moon run "#angular:format"
    deps: [sync.angular.do]
    options:
      runDepsInParallel: false
      shell: false
      cache: false

  {{ generator_task('ng-app', 'angular-app', 'Add angular app') }}

  {{ generator_task('ng-lib', 'angular-lib', 'Add angular lib') }}
  {%- endif %}

  {% if backend == 'rust' -%}
  sync.rust.do:
    description: Sync rust configs from project & moon configs
    command: {{ frontend_toolchain }} wizard/rust/scripts/sync-configs.ts
    inputs:
      - /Cargo.toml
      - /rust/*/moon.yml
      - /rust/*/Cargo.toml
      - /wizard/rust/scripts/sync-configs.ts
      - /wizard/moon.yml
      - "@group(moon-utils)"
    options:
      runFromWorkspaceRoot: true
      mutex: wizard-sync-rust
      internal: true
      cache: false

  sync.rust:
    command: moon run "#rust:format"
    deps: [sync.rust.do]
    options:
      runDepsInParallel: false
      shell: false
      cache: false

  {{ generator_task('rust-app', 'rust-package -- --type=application', 'Add rust app') }}

  {{ generator_task('rust-lib', 'rust-package -- --type=library', 'Add rust app') }}

  {{ generator_task('rust-axum', 'rust-package -- --type=application --preset=axum', 'Add rust app') }}
  {%- endif %}

  {% if storybook -%}
  sync.storybook:
    description: Sync storybook configs from project & moon configs
    command: {{ frontend_toolchain }} wizard/storybook/scripts/sync.ts
    toolchain: {{ frontend_toolchain }}
    inputs:
      - /angular.json
      - /**/moon.yml
      - /wizard/storybook/scripts/sync.ts
      - /wizard/moon.yml
      - "@group(moon-utils)"
    outputs:
      - /**/.storybook/refs.json
    options:
      runFromWorkspaceRoot: true
      mutex: wizard-sync-storybook
      internal: true
  {%- endif %}

  format:
    deps: ["~:eslint.fix"]
    options:
      runDepsInParallel: false
      cache: false

  sync.setup:
    command: moon setup
    toolchain: system
    options:
      internal: true
      cache: false
      runFromWorkspaceRoot: true

  sync.moon:
    command: moon sync projects
    toolchain: system
    options:
      internal: true
      cache: false
      runFromWorkspaceRoot: true

  sync.scripts:
    command: {{ frontend_toolchain }} wizard/merge-scripts.ts package.json scripts.yml
    toolchain: {{ frontend_toolchain }}
    inputs:
      - /package.json
      - /scripts.yml
    outputs:
      - /package.json
    options:
      runFromWorkspaceRoot: true

  sync.scripts.watch:
    command: >-
      watchexec
      --watch-non-recursive=.
      --watch=scripts.yml
      --filter=scripts.yml
      --debounce 200ms
      --color always
      --restart
      moon wizard:sync.scripts
    toolchain: rust
    preset: server
    options:
      runFromWorkspaceRoot: true
      internal: true

  sync:
    deps:
      - sync.setup
      {% if frontend == 'angular' -%}
      - sync.angular
      {%- endif %}
      {% if database == 'gel' -%}
      - gel:format
      {%- endif %}
      {% if backend == 'rust' -%}
      - sync.rust
      {%- endif %}
      {% if storybook -%}
      - sync.storybook
      {%- endif %}
      - sync.moon
      - sync.scripts
      - ~:format
    options:
      runDepsInParallel: false
      runFromWorkspaceRoot: true
      mutex: wizard-sync-all
      cache: false

  watcher:
    command: {{ frontend_toolchain }} .moon/utils/watcher.ts
    toolchain: system
    preset: server
    deps: [~:sync]
    options:
      runFromWorkspaceRoot: true
      mutex: watcher
      internal: true

  start:
    preset: server
    deps: [~:watcher, ~:sync.scripts.watch]
